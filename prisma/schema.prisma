// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client_js {
  provider = "prisma-client-js"
  output   = "./client"
}

generator client_go {
  provider = "go run github.com/steebchen/prisma-client-go"
  output   = "../internal/db"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Grant {
  authorization_code
  client_credentials
  refresh_token
  password
  implicit
}

model Client {
  id            String   @id
  name          String
  secret        String?
  redirectUris  String[]
  allowedGrants Grant[]
  scopes        Scope[]

  authCodes AuthCode[]
  tokens    Token[]
}

enum CodeChallengeMethod {
  S256
  plain
}

model AuthCode {
  code                String               @id
  redirectUri         String?
  codeChallenge       String?
  codeChallengeMethod CodeChallengeMethod?
  expiresAt           DateTime
  user                LuoguUser            @relation(fields: [userId], references: [uid])
  userId              Int
  client              Client               @relation(fields: [clientId], references: [id])
  clientId            String
  scopes              Scope[]

  revoked Boolean @default(false)
}

model Token {
  accessToken           String    @id
  accessTokenExpiresAt  DateTime
  refreshToken          String?
  refreshTokenExpiresAt DateTime?
  client                Client    @relation(fields: [clientId], references: [id])
  clientId              String
  user                  LuoguUser @relation(fields: [userId], references: [uid])
  userId                Int
  scopes                Scope[]
  originatingAuthCodeId String?

  revoked Boolean @default(false)
}

enum LuoguUserColor {
  Cheater
  Gray
  Blue
  Green
  Orange
  Red
  Purple
}

model LuoguUser {
  registerTime   DateTime           @db.Timestamp(0)
  introduction   String?
  prize          Json[]
  elo            LuoguUserElo?
  followingCount Int
  followerCount  Int
  ranking        Int?
  eloValue       Int?
  blogAddress    String?
  practice       LuoguUserPractice?

  uid        Int            @id
  name       String
  avatar     String
  slogan     String?
  badge      String?
  isAdmin    Boolean
  isBanned   Boolean
  color      LuoguUserColor
  ccfLevel   Int
  background String?
  isRoot     Boolean

  updatedAt DateTime @updatedAt

  sessions LuoguSession[]

  authCodes AuthCode[]
  tokens    Token[]
}

model LuoguUserPractice {
  uid  Int       @id
  user LuoguUser @relation(fields: [uid], references: [uid])

  passedProblemCount    Int
  submittedProblemCount Int

  updatedAt DateTime @updatedAt
}

model LuoguUserElo {
  uid  Int       @id
  user LuoguUser @relation(fields: [uid], references: [uid])

  contest LuoguContest @relation(fields: [contestId], references: [id])
  rating  Int
  time    DateTime     @db.Timestamp(0)
  latest  Boolean

  contestId Int
}

model LuoguSession {
  clientId String    @id @db.Char(40)
  uid      Int
  user     LuoguUser @relation(fields: [uid], references: [uid])

  valid      Boolean  @default(true)
  lastUsedAt DateTime @default(now())
}

model LuoguContest {
  id        Int      @id
  name      String
  startTime DateTime @db.Timestamp(0)
  endTime   DateTime @db.Timestamp(0)

  userElo LuoguUserElo[]
}

enum Scope {
  user_info
  client_id
}
